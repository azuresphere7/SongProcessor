<UserControl xmlns = "https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:models="clr-namespace:AMQSongProcessor.Models;assembly=AMQSongProcessor"
             xmlns:uimodels="clr-namespace:AMQSongProcessor.UI.Models;assembly=AMQSongProcessor.UI"
             xmlns:controls="clr-namespace:AMQSongProcessor.UI.Controls;assembly=AMQSongProcessor.UI"
             xmlns:converters="clr-namespace:AMQSongProcessor.UI.Converters;assembly=AMQSongProcessor.UI"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="800"
             x:Class="AMQSongProcessor.UI.Views.SongView">

  <UserControl.Resources>
    <!-- SongVisibility must go first, Song(s) must go second. No other values. -->
    <converters:SongVisibilityConverter x:Key="SongVisibility" />
    <!-- SearchTerms must go first, Song(s)/Anime(s) must go second. No other values. -->
    <converters:SearchVisibilityConverter x:Key="SearchVisibility" />
  </UserControl.Resources>

  <UserControl.Styles>
    <Style Selector=":is(InputElement).notWhenBusy">
      <Setter Property="IsEnabled"
              Value="{Binding ElementName=Tree, Path=!DataContext.IsBusy^}" />
    </Style>
  </UserControl.Styles>

  <Grid RowDefinitions="1*,19*">
    <Grid ColumnDefinitions="9*,1*" Classes="notWhenBusy">
      <Grid ColumnDefinitions="9*,1*">
        <TextBox Watermark="Directory" Text="{Binding Directory}" KeyDown="OnKeyDown"
                 IsEnabled="{Binding !Anime.Count}" />
        <Button Grid.Column="1" Content="Select" Command="{Binding SelectDirectory}" />
      </Grid>
      <Button Grid.Column="1" Content="Load" Command="{Binding Load}" />
      <Button Grid.Column="1" Content="Unload" Command="{Binding Unload}"
              IsVisible="{Binding Anime.Count}" />
    </Grid>

    <Grid Grid.Row="1" ColumnDefinitions="9*,1*">
      <Grid.ContextMenu>
        <ContextMenu>
          <HeaderedContentControl Header="Search by anime name">
            <TextBox Text="{Binding Search.AnimeName}" />
          </HeaderedContentControl>
          <HeaderedContentControl Header="Search by song name">
            <TextBox Text="{Binding Search.SongName}" />
          </HeaderedContentControl>
          <HeaderedContentControl Header="Search by artist name">
            <TextBox Text="{Binding Search.ArtistName}" />
          </HeaderedContentControl>
          <MenuItem Header="-" />
          <MenuItem Header="Expand all">
            <MenuItem.Icon>
              <CheckBox IsChecked="{Binding SongVisibility.IsExpanded}" />
            </MenuItem.Icon>
          </MenuItem>
          <MenuItem Header="-" />
          <MenuItem Header="Show ignored songs">
            <MenuItem.Icon>
              <CheckBox IsChecked="{Binding SongVisibility.ShowIgnoredSongs}" />
            </MenuItem.Icon>
          </MenuItem>
          <MenuItem Header="-" />
          <MenuItem Header="Show unsubmitted songs">
            <MenuItem.Icon>
              <CheckBox IsChecked="{Binding SongVisibility.ShowUnsubmittedSongs}" />
            </MenuItem.Icon>
          </MenuItem>
          <MenuItem Header="Show incompleted songs">
            <MenuItem.Icon>
              <CheckBox IsChecked="{Binding SongVisibility.ShowIncompletedSongs}" />
            </MenuItem.Icon>
          </MenuItem>
          <MenuItem Header="Show completed songs">
            <MenuItem.Icon>
              <CheckBox IsChecked="{Binding SongVisibility.ShowCompletedSongs}" />
            </MenuItem.Icon>
          </MenuItem>
        </ContextMenu>
      </Grid.ContextMenu>

      <TreeView Name="Tree" Items="{Binding Anime}">
        <TreeView.DataTemplates>
          <TreeDataTemplate DataType="uimodels:ObservableAnime" ItemsSource="{Binding Songs}">
            <TextBlock Classes="anime">
              <TextBlock.ContextMenu>
                <ContextMenu Classes="notWhenBusy">
                  <MenuItem Header="Copy ANNID" CommandParameter="{Binding Id}"
                            Command="{Binding ElementName=Tree, Path=DataContext.CopyANNID}" />
                  <MenuItem Header="Open Info File" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.OpenInfoFile}" />
                  <MenuItem Header="Get Volume Info" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.GetVolumeInfo}" />
                  <MenuItem Header="-" />
                  <MenuItem Header="Duplicate Anime" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.DuplicateAnime}" />
                  <MenuItem Header="Delete Anime" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.DeleteAnime}" />
                  <MenuItem Header="Clear Songs" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.ClearSongs}" />
                  <MenuItem Header="-" />
                  <MenuItem Header="Change Source" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.ChangeSource}" />
                  <MenuItem Header="Clear Source" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.ClearSource}" />
                  <MenuItem Header="-" />
                  <MenuItem Header="Add Song" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.AddSong}" />
                  <MenuItem Header="Paste Song" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.PasteSong}"
                            IsEnabled="{Binding ElementName=Tree, Path=DataContext.ClipboardSong, Converter={x:Static ObjectConverters.IsNotNull}}" />
                </ContextMenu>
              </TextBlock.ContextMenu>

              <TextBlock.Background>
                <Binding Path="VideoInfo"
                         Converter="{x:Static converters:MiscConverters.SourceColor}" />
              </TextBlock.Background>
            </TextBlock>
          </TreeDataTemplate>

          <DataTemplate DataType="models:Song">
            <TextBlock Classes="song"
                       Background="{Binding Status, Converter={x:Static converters:MiscConverters.StatusColor}}">
              <TextBlock.ContextMenu>
                <ContextMenu Classes="notWhenBusy">
                  <MenuItem Header="Edit Song" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.EditSong}" />
                  <MenuItem Header="-" />
                  <MenuItem Header="Copy Song" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.CopySong}" />
                  <MenuItem Header="Cut Song" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.CutSong}" />
                  <MenuItem Header="Delete Song" CommandParameter="{Binding}"
                            Command="{Binding ElementName=Tree, Path=DataContext.DeleteSong}" />
                </ContextMenu>
              </TextBlock.ContextMenu>
            </TextBlock>
          </DataTemplate>
        </TreeView.DataTemplates>

        <TreeView.Styles>
          <Style Selector="TreeViewItem > TextBlock">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Left" />
          </Style>

          <Style Selector="TreeView > TreeViewItem">
            <!-- Expand all the anime items to show all the songs -->
            <Setter Property="IsExpanded"
                    Value="{Binding ElementName=Tree, Path=DataContext.SongVisibility.IsExpanded}" />

            <!-- Don't show the anime if its name doesnt match the anime name search term -->
            <!-- or if none of its songs match the song name/artist search terms -->
            <Setter Property="IsVisible">
              <MultiBinding Converter="{x:Static BoolConverters.And}">
                <MultiBinding Converter="{StaticResource SearchVisibility}">
                  <Binding ElementName="Tree" Path="DataContext.Search.Self" />
                  <Binding />
                </MultiBinding>
                <MultiBinding Converter="{StaticResource SearchVisibility}">
                  <Binding ElementName="Tree" Path="DataContext.Search.Self" />
                  <Binding Path="Songs.Items" />
                </MultiBinding>
              </MultiBinding>
            </Setter>
          </Style>

          <Style Selector="TreeView > TreeViewItem > TreeViewItem">
            <!-- Hide the songs if they are ignored and we don't want to see ignored songs -->
            <Setter Property="IsVisible">
              <MultiBinding Converter="{x:Static BoolConverters.And}">
                <MultiBinding Converter="{StaticResource SongVisibility}">
                  <Binding ElementName="Tree" Path="DataContext.SongVisibility.Self" />
                  <Binding />
                </MultiBinding>
                <MultiBinding Converter="{StaticResource SearchVisibility}">
                  <Binding ElementName="Tree" Path="DataContext.Search.Self" />
                  <Binding />
                </MultiBinding>
              </MultiBinding>
            </Setter>
          </Style>

          <Style Selector="TreeView > TreeViewItem /template/ ToggleButton#expander">
            <!-- Don't show the expand button if all songs are ignored and ignored songs are blocked -->
            <Setter Property="IsVisible">
              <MultiBinding Converter="{StaticResource SongVisibility}">
                <Binding ElementName="Tree" Path="DataContext.SongVisibility.Self" />
                <Binding Path="Songs.Items" />
              </MultiBinding>
            </Setter>
          </Style>
        </TreeView.Styles>
      </TreeView>

      <Grid Grid.Column="1" RowDefinitions="1*,1*,1*,12*,6*" IsEnabled="{Binding Anime.Count}">
        <Button Grid.Row="0" Classes="notWhenBusy" Content="Export Fixes"
                Command="{Binding ExportFixes}" />
        <Button Grid.Row="1" Classes="notWhenBusy" Content="Process Songs"
                Command="{Binding ProcessSongs}" />
        <Button Grid.Row="1" Content="Cancel"
                Command="{Binding CancelProcessing}"
                IsVisible="{Binding ProcessSongs.IsExecuting^}" />

        <UniformGrid Grid.Row="3" Columns="1" IsVisible="{Binding !!ProcessingData}">
          <UniformGrid.Styles>
            <Style Selector=":is(TextBlock)">
              <Setter Property="TextWrapping" Value="Wrap" />
            </Style>
          </UniformGrid.Styles>

          <!-- Zero width spaces are used in the start of the StringFormats -->
          <HeaderedContentControl Header="Current Item">
            <TextBlock>
              <TextBlock.Text>
                <MultiBinding StringFormat="#{0} out of {1}">
                  <Binding Path="CurrentJob" />
                  <Binding Path="QueuedJobs" />
                </MultiBinding>
              </TextBlock.Text>
            </TextBlock>
          </HeaderedContentControl>
          <HeaderedContentControl Header="File">
            <TextBlock Text="{Binding ProcessingData.File}" />
          </HeaderedContentControl>
          <HeaderedContentControl Header="Percentage Complete">
            <TextBlock>
              <TextBlock.Text>
                <Binding Path="ProcessingData.Percentage" StringFormat="​{0:P2}" />
              </TextBlock.Text>
            </TextBlock>
          </HeaderedContentControl>
          <HeaderedContentControl Header="Completion ETA">
            <TextBlock Text="{Binding ProcessingData.CompletionETA}" />
          </HeaderedContentControl>
          <HeaderedContentControl Header="Bitrate">
            <TextBlock>
              <TextBlock.Text>
                <Binding Path="ProcessingData.Progress.Bitrate" StringFormat="​{0}Kbp/s" />
              </TextBlock.Text>
            </TextBlock>
          </HeaderedContentControl>
          <HeaderedContentControl Header="Fps">
            <TextBlock Text="{Binding ProcessingData.Progress.Fps}" />
          </HeaderedContentControl>
          <HeaderedContentControl Header="Dropped Frames">
            <TextBlock Text="{Binding ProcessingData.Progress.DroppedFrames}" />
          </HeaderedContentControl>
          <HeaderedContentControl Header="Duplicate Frames">
            <TextBlock Text="{Binding ProcessingData.Progress.DuplicateFrames}" />
          </HeaderedContentControl>
          <HeaderedContentControl Header="Speed">
            <TextBlock>
              <TextBlock.Text>
                <Binding Path="ProcessingData.Progress.Speed" StringFormat="​{0}x" />
              </TextBlock.Text>
            </TextBlock>
          </HeaderedContentControl>
          <HeaderedContentControl Header="Total Size">
            <TextBlock>
              <TextBlock.Text>
                <Binding Path="ProcessingData.Progress.TotalSize" StringFormat="​{0:n0} bytes" />
              </TextBlock.Text>
            </TextBlock>
          </HeaderedContentControl>
        </UniformGrid>
      </Grid>
    </Grid>
  </Grid>
</UserControl>